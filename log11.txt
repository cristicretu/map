PrgState{
id=0,
 exeStack=[(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))))))))],
 symTable={},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=(the heap is empty)
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[Ref(Int) v1, (Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))],
 symTable={},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=(the heap is empty)
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[Ref(Int) v1, (Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))],
 symTable={},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=(the heap is empty)
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))],
 symTable={v1=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=(the heap is empty)
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))],
 symTable={v1=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=(the heap is empty)
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[Ref(Int) v2, (NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))))))],
 symTable={v1=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=(the heap is empty)
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[Ref(Int) v2, (NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))))))],
 symTable={v1=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=(the heap is empty)
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))))))],
 symTable={v1=RefValue(0, Int), v2=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=(the heap is empty)
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))))))],
 symTable={v1=RefValue(0, Int), v2=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=(the heap is empty)
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[NewStmt(v1, 20), (NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))],
 symTable={v1=RefValue(0, Int), v2=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=(the heap is empty)
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[NewStmt(v1, 20), (NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))],
 symTable={v1=RefValue(0, Int), v2=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=(the heap is empty)
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))],
 symTable={v1=RefValue(1, Int), v2=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))],
 symTable={v1=RefValue(1, Int), v2=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[NewStmt(v2, 30), (Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))))],
 symTable={v1=RefValue(1, Int), v2=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[NewStmt(v2, 30), (Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))))],
 symTable={v1=RefValue(1, Int), v2=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))))],
 symTable={v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))))],
 symTable={v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[Int x, (newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))],
 symTable={v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[Int x, (newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))],
 symTable={v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))],
 symTable={x=0, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))],
 symTable={x=0, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[newLock(x), (fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))],
 symTable={x=0, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[newLock(x), (fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))],
 symTable={x=0, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x))))), (fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x))))), (fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=1,
 exeStack=[(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x))))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=1,
 exeStack=[(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x))))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)))), (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=1,
 exeStack=[fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x)))), (lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)))), (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=1,
 exeStack=[fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x)))), (lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=1,
 exeStack=[(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=2,
 exeStack=[(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=3,
 exeStack=[(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x)))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=1,
 exeStack=[(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=2,
 exeStack=[(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=3,
 exeStack=[(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x)))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=1,
 exeStack=[lock(x), (WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=2,
 exeStack=[fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))), (WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=3,
 exeStack=[lock(x), (WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=1,
 exeStack=[lock(x), (WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=2,
 exeStack=[fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))), (WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=3,
 exeStack=[lock(x), (WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=1,
 exeStack=[(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=2,
 exeStack=[(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=3,
 exeStack=[lock(x), (WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=4,
 exeStack=[(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=1,
 exeStack=[(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=2,
 exeStack=[(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=3,
 exeStack=[lock(x), (WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=4,
 exeStack=[(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=1,
 exeStack=[WriteHeapStmt(v1, RefExp(v1) + 1), unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=2,
 exeStack=[WriteHeapStmt(v2, RefExp(v2) + 1), unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=3,
 exeStack=[lock(x), (WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=4,
 exeStack=[WriteHeapStmt(v2, RefExp(v2) + 1), unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=1,
 exeStack=[WriteHeapStmt(v1, RefExp(v1) + 1), unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=2,
 exeStack=[WriteHeapStmt(v2, RefExp(v2) + 1), unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=3,
 exeStack=[lock(x), (WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=4,
 exeStack=[WriteHeapStmt(v2, RefExp(v2) + 1), unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=1}
}
PrgState{
id=1,
 exeStack=[unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=1}
}
PrgState{
id=2,
 exeStack=[unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=1}
}
PrgState{
id=3,
 exeStack=[lock(x), (WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=1}
}
PrgState{
id=4,
 exeStack=[unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=1}
}
PrgState{
id=1,
 exeStack=[unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=1}
}
PrgState{
id=2,
 exeStack=[unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=1}
}
PrgState{
id=3,
 exeStack=[lock(x), (WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=1}
}
PrgState{
id=4,
 exeStack=[unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=1,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=2,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=3,
 exeStack=[(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=4,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=1,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=2,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=3,
 exeStack=[(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=4,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=1,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=2,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=3,
 exeStack=[WriteHeapStmt(v1, RefExp(v1) - 1), unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=4,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=3,
 exeStack=[WriteHeapStmt(v1, RefExp(v1) - 1), unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=3,
 exeStack=[unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=3,
 exeStack=[unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=3,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=3,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=3,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(print(RefExp(v1));print(RefExp(v2))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(print(RefExp(v1));print(RefExp(v2))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(print(RefExp(v1));print(RefExp(v2))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(print(RefExp(v1));print(RefExp(v2))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (print(RefExp(v1));print(RefExp(v2)))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (print(RefExp(v1));print(RefExp(v2)))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(print(RefExp(v1));print(RefExp(v2)))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(print(RefExp(v1));print(RefExp(v2)))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[print(RefExp(v1)), print(RefExp(v2))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[print(RefExp(v1)), print(RefExp(v2))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[print(RefExp(v2))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[20],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[print(RefExp(v2))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[20],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[20, 32],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[20, 32],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[20, 32],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))))))))],
 symTable={},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=(the heap is empty)
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[Ref(Int) v1, (Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))],
 symTable={},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=(the heap is empty)
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[Ref(Int) v1, (Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))],
 symTable={},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=(the heap is empty)
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))],
 symTable={v1=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=(the heap is empty)
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))],
 symTable={v1=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=(the heap is empty)
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[Ref(Int) v2, (NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))))))],
 symTable={v1=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=(the heap is empty)
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[Ref(Int) v2, (NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))))))],
 symTable={v1=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=(the heap is empty)
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))))))],
 symTable={v1=RefValue(0, Int), v2=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=(the heap is empty)
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))))))],
 symTable={v1=RefValue(0, Int), v2=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=(the heap is empty)
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[NewStmt(v1, 20), (NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))],
 symTable={v1=RefValue(0, Int), v2=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=(the heap is empty)
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[NewStmt(v1, 20), (NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))],
 symTable={v1=RefValue(0, Int), v2=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=(the heap is empty)
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))],
 symTable={v1=RefValue(1, Int), v2=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))],
 symTable={v1=RefValue(1, Int), v2=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[NewStmt(v2, 30), (Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))))],
 symTable={v1=RefValue(1, Int), v2=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[NewStmt(v2, 30), (Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))))],
 symTable={v1=RefValue(1, Int), v2=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))))],
 symTable={v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))))],
 symTable={v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[Int x, (newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))],
 symTable={v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[Int x, (newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))],
 symTable={v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))],
 symTable={x=0, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))],
 symTable={x=0, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[newLock(x), (fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))],
 symTable={x=0, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[newLock(x), (fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))],
 symTable={x=0, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x))))), (fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x))))), (fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=1,
 exeStack=[(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x))))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=1,
 exeStack=[(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x))))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)))), (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=1,
 exeStack=[fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x)))), (lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)))), (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=1,
 exeStack=[fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x)))), (lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=1,
 exeStack=[(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=2,
 exeStack=[(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=3,
 exeStack=[(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x)))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=1,
 exeStack=[(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=2,
 exeStack=[(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=3,
 exeStack=[(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x)))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=1,
 exeStack=[lock(x), (WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=2,
 exeStack=[fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))), (WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=3,
 exeStack=[lock(x), (WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=1,
 exeStack=[lock(x), (WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=2,
 exeStack=[fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))), (WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=3,
 exeStack=[lock(x), (WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=3}
}
PrgState{
id=1,
 exeStack=[(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=3}
}
PrgState{
id=2,
 exeStack=[(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=3}
}
PrgState{
id=3,
 exeStack=[(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=3}
}
PrgState{
id=4,
 exeStack=[(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=3}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=3}
}
PrgState{
id=1,
 exeStack=[(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=3}
}
PrgState{
id=2,
 exeStack=[(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=3}
}
PrgState{
id=3,
 exeStack=[(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=3}
}
PrgState{
id=4,
 exeStack=[(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=3}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=3}
}
PrgState{
id=1,
 exeStack=[WriteHeapStmt(v1, RefExp(v1) + 1), unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=3}
}
PrgState{
id=2,
 exeStack=[WriteHeapStmt(v2, RefExp(v2) + 1), unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=3}
}
PrgState{
id=3,
 exeStack=[WriteHeapStmt(v1, RefExp(v1) - 1), unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=3}
}
PrgState{
id=4,
 exeStack=[WriteHeapStmt(v2, RefExp(v2) + 1), unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=3}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=3}
}
PrgState{
id=1,
 exeStack=[WriteHeapStmt(v1, RefExp(v1) + 1), unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=3}
}
PrgState{
id=2,
 exeStack=[WriteHeapStmt(v2, RefExp(v2) + 1), unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=3}
}
PrgState{
id=3,
 exeStack=[WriteHeapStmt(v1, RefExp(v1) - 1), unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=3}
}
PrgState{
id=4,
 exeStack=[WriteHeapStmt(v2, RefExp(v2) + 1), unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=3}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=1,
 exeStack=[unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=2,
 exeStack=[unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=3,
 exeStack=[unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=4,
 exeStack=[unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=1,
 exeStack=[unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=2,
 exeStack=[unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=3,
 exeStack=[unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=4,
 exeStack=[unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=1,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=2,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=3,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=4,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=1,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=2,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=3,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=4,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=1,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=2,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=3,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=4,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(print(RefExp(v1));print(RefExp(v2))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(print(RefExp(v1));print(RefExp(v2))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(print(RefExp(v1));print(RefExp(v2))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(print(RefExp(v1));print(RefExp(v2))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (print(RefExp(v1));print(RefExp(v2)))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (print(RefExp(v1));print(RefExp(v2)))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(print(RefExp(v1));print(RefExp(v2)))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(print(RefExp(v1));print(RefExp(v2)))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[print(RefExp(v1)), print(RefExp(v2))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[print(RefExp(v1)), print(RefExp(v2))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[print(RefExp(v2))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[20],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[print(RefExp(v2))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[20],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[20, 32],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[20, 32],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[20, 32],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))))))))],
 symTable={},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=(the heap is empty)
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[Ref(Int) v1, (Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))],
 symTable={},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=(the heap is empty)
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[Ref(Int) v1, (Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))],
 symTable={},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=(the heap is empty)
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))],
 symTable={v1=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=(the heap is empty)
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))],
 symTable={v1=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=(the heap is empty)
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[Ref(Int) v2, (NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))))))],
 symTable={v1=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=(the heap is empty)
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[Ref(Int) v2, (NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))))))],
 symTable={v1=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=(the heap is empty)
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))))))],
 symTable={v1=RefValue(0, Int), v2=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=(the heap is empty)
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))))))],
 symTable={v1=RefValue(0, Int), v2=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=(the heap is empty)
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[NewStmt(v1, 20), (NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))],
 symTable={v1=RefValue(0, Int), v2=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=(the heap is empty)
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[NewStmt(v1, 20), (NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))],
 symTable={v1=RefValue(0, Int), v2=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=(the heap is empty)
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))],
 symTable={v1=RefValue(1, Int), v2=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))],
 symTable={v1=RefValue(1, Int), v2=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[NewStmt(v2, 30), (Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))))],
 symTable={v1=RefValue(1, Int), v2=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[NewStmt(v2, 30), (Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))))],
 symTable={v1=RefValue(1, Int), v2=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))))],
 symTable={v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))))],
 symTable={v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[Int x, (newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))],
 symTable={v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[Int x, (newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))],
 symTable={v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))],
 symTable={x=0, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))],
 symTable={x=0, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[newLock(x), (fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))],
 symTable={x=0, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[newLock(x), (fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))],
 symTable={x=0, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={}
}
PrgState{
id=0,
 exeStack=[(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x))))), (fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x))))), (fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=1,
 exeStack=[(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x))))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=1,
 exeStack=[(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x))))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)))), (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=1,
 exeStack=[fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x)))), (lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)))), (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=1,
 exeStack=[fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x)))), (lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=1,
 exeStack=[(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=2,
 exeStack=[(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=3,
 exeStack=[(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x)))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=1,
 exeStack=[(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=2,
 exeStack=[(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=3,
 exeStack=[(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x)))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=1,
 exeStack=[lock(x), (WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=2,
 exeStack=[fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))), (WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=3,
 exeStack=[lock(x), (WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=1,
 exeStack=[lock(x), (WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=2,
 exeStack=[fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))), (WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=3,
 exeStack=[lock(x), (WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=1,
 exeStack=[(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=2,
 exeStack=[(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=3,
 exeStack=[lock(x), (WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=4,
 exeStack=[(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=1,
 exeStack=[(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=2,
 exeStack=[(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=3,
 exeStack=[lock(x), (WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=4,
 exeStack=[(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=1,
 exeStack=[WriteHeapStmt(v1, RefExp(v1) + 1), unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=2,
 exeStack=[WriteHeapStmt(v2, RefExp(v2) + 1), unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=3,
 exeStack=[lock(x), (WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=4,
 exeStack=[WriteHeapStmt(v2, RefExp(v2) + 1), unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=1,
 exeStack=[WriteHeapStmt(v1, RefExp(v1) + 1), unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=2,
 exeStack=[WriteHeapStmt(v2, RefExp(v2) + 1), unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=3,
 exeStack=[lock(x), (WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=4,
 exeStack=[WriteHeapStmt(v2, RefExp(v2) + 1), unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)),
 fileTable={},
 heap=1 -> 20
2 -> 30
,
 lockTable={1=1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=1}
}
PrgState{
id=1,
 exeStack=[unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=1}
}
PrgState{
id=2,
 exeStack=[unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=1}
}
PrgState{
id=3,
 exeStack=[lock(x), (WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=1}
}
PrgState{
id=4,
 exeStack=[unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=1}
}
PrgState{
id=1,
 exeStack=[unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=1}
}
PrgState{
id=2,
 exeStack=[unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=1}
}
PrgState{
id=3,
 exeStack=[lock(x), (WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=1}
}
PrgState{
id=4,
 exeStack=[unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=1,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=2,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=3,
 exeStack=[(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=4,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=1,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=2,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=3,
 exeStack=[(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=4,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=1,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=2,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=3,
 exeStack=[WriteHeapStmt(v1, RefExp(v1) - 1), unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=4,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=3,
 exeStack=[WriteHeapStmt(v1, RefExp(v1) - 1), unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 21
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=3,
 exeStack=[unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=3,
 exeStack=[unlock(x)],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=3}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=3,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=3,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=3,
 exeStack=[],
 symTable={x=1, v2=RefValue(2, Int), v1=RefValue(1, Int)},
 output=[],
 originalProgram=(lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2))))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(print(RefExp(v1));print(RefExp(v2))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (NOP;(print(RefExp(v1));print(RefExp(v2))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(print(RefExp(v1));print(RefExp(v2))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(NOP;(print(RefExp(v1));print(RefExp(v2))))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (print(RefExp(v1));print(RefExp(v2)))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[NOP, (print(RefExp(v1));print(RefExp(v2)))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(print(RefExp(v1));print(RefExp(v2)))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[(print(RefExp(v1));print(RefExp(v2)))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[print(RefExp(v1)), print(RefExp(v2))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[print(RefExp(v1)), print(RefExp(v2))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[print(RefExp(v2))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[20],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[print(RefExp(v2))],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[20],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[20, 32],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[20, 32],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
PrgState{
id=0,
 exeStack=[],
 symTable={x=1, v1=RefValue(1, Int), v2=RefValue(2, Int)},
 output=[20, 32],
 originalProgram=(Ref(Int) v1;(Ref(Int) v2;(NewStmt(v1, 20);(NewStmt(v2, 30);(Int x;(newLock(x);(fork((fork((lock(x);(WriteHeapStmt(v1, RefExp(v1) - 1);unlock(x))));(lock(x);(WriteHeapStmt(v1, RefExp(v1) + 1);unlock(x)))));(fork((fork((WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x)));(WriteHeapStmt(v2, RefExp(v2) + 1);unlock(x))));(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(NOP;(print(RefExp(v1));print(RefExp(v2)))))))))))))))))))))),
 fileTable={},
 heap=1 -> 20
2 -> 32
,
 lockTable={1=-1}
}
